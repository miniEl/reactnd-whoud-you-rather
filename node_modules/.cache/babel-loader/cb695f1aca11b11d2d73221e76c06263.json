{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/merhanelkheshen/Documents/MyStudy/react/react-nanodegree/would-you-rather(git)/reactnd-whout-you-rather/src/components/ViewQuestion/Answered.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, ProgressBar } from 'react-bootstrap';\n\nclass Answered extends Component {\n  render() {\n    const {\n      authedUser,\n      options,\n      selected,\n      totalVotes\n    } = this.props;\n    console.log('Answered::');\n    console.log(selected);\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), options.map((option, per, selected) => (selected = option.votes.find(userVote => {\n        return userVote === authedUser.id;\n      }), per = Math.floor(option.votes.length / totalVotes * 100), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: selected ? 'selected box-container' : 'box-container',\n        children: [/*#__PURE__*/_jsxDEV(Card.Subtitle, {\n          children: option.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n          now: per,\n          label: `${per}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [option.votes.length, \" of \", totalVotes, \" votes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 15\n        }, this)]\n      }, option.text, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = ({\n  authedUser\n}, {\n  question\n}) => {\n  console.log('log::');\n  console.log(question);\n  const options = [question.optionOne, question.optionTwo];\n  return {\n    authedUser,\n    options,\n    selected: options.map(option => option.votes.find(userVote => {\n      return userVote === authedUser.id;\n    })),\n    totalVotes: question.optionOne.votes.length + question.optionTwo.votes.length\n  };\n};\n\nexport default connect(mapStateToProps)(Answered);","map":{"version":3,"sources":["/Users/merhanelkheshen/Documents/MyStudy/react/react-nanodegree/would-you-rather(git)/reactnd-whout-you-rather/src/components/ViewQuestion/Answered.js"],"names":["React","Component","Fragment","connect","Card","ProgressBar","Answered","render","authedUser","options","selected","totalVotes","props","console","log","map","option","per","votes","find","userVote","id","Math","floor","length","text","mapStateToProps","question","optionOne","optionTwo"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,iBAAlC;;AAEA,MAAMC,QAAN,SAAuBL,SAAvB,CAAiC;AAC/BM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,OAAd;AAAuBC,MAAAA,QAAvB;AAAiCC,MAAAA;AAAjC,QAAgD,KAAKC,KAA3D;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,wBACE,QAAC,QAAD;AAAA,8BACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAGID,OAAO,CAACM,GAAR,CAAY,CAACC,MAAD,EAASC,GAAT,EAAcP,QAAd,MACVA,QAAQ,GAAGM,MAAM,CAACE,KAAP,CAAaC,IAAb,CAAkBC,QAAQ,IAAI;AAAE,eAAOA,QAAQ,KAAKZ,UAAU,CAACa,EAA/B;AAAmC,OAAnE,CAAX,EACAJ,GAAG,GAAGK,IAAI,CAACC,KAAL,CAAWP,MAAM,CAACE,KAAP,CAAaM,MAAb,GAAsBb,UAAtB,GAAmC,GAA9C,CADN,eAEA;AAAK,QAAA,SAAS,EAAED,QAAQ,GAAG,wBAAH,GAA8B,eAAtD;AAAA,gCACE,QAAC,IAAD,CAAM,QAAN;AAAA,oBAAgBM,MAAM,CAACS;AAAvB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,WAAD;AAAa,UAAA,GAAG,EAAER,GAAlB;AAAuB,UAAA,KAAK,EAAG,GAAEA,GAAI;AAArC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,IAAD,CAAM,IAAN;AAAA,qBAAYD,MAAM,CAACE,KAAP,CAAaM,MAAzB,UAAqCb,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA,SAA4EK,MAAM,CAACS,IAAnF;AAAA;AAAA;AAAA;AAAA,cAHU,CAAZ,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AArB8B;;AAwBjC,MAAMC,eAAe,GAAG,CAAC;AAAElB,EAAAA;AAAF,CAAD,EAAiB;AAAEmB,EAAAA;AAAF,CAAjB,KAAkC;AACxDd,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYa,QAAZ;AACA,QAAMlB,OAAO,GAAG,CAACkB,QAAQ,CAACC,SAAV,EAAqBD,QAAQ,CAACE,SAA9B,CAAhB;AAEA,SAAO;AACLrB,IAAAA,UADK;AAELC,IAAAA,OAFK;AAGLC,IAAAA,QAAQ,EAAED,OAAO,CAACM,GAAR,CAAaC,MAAD,IACpBA,MAAM,CAACE,KAAP,CAAaC,IAAb,CAAkBC,QAAQ,IAAI;AAC5B,aAAOA,QAAQ,KAAKZ,UAAU,CAACa,EAA/B;AACD,KAFD,CADQ,CAHL;AAQLV,IAAAA,UAAU,EAAEgB,QAAQ,CAACC,SAAT,CAAmBV,KAAnB,CAAyBM,MAAzB,GAAkCG,QAAQ,CAACE,SAAT,CAAmBX,KAAnB,CAAyBM;AARlE,GAAP;AAUD,CAfD;;AAiBA,eAAerB,OAAO,CAACuB,eAAD,CAAP,CAAyBpB,QAAzB,CAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, ProgressBar } from 'react-bootstrap';\n\nclass Answered extends Component {\n  render() {\n    const { authedUser, options, selected, totalVotes } = this.props\n    console.log('Answered::');\n    console.log(selected);\n    return (\n      <Fragment>\n        <Card.Title>Results:</Card.Title>\n        {\n          options.map((option, per, selected) => (\n            selected = option.votes.find(userVote => { return userVote === authedUser.id }),\n            per = Math.floor(option.votes.length / totalVotes * 100),\n            <div className={selected ? 'selected box-container' : 'box-container'} key={option.text}>\n              <Card.Subtitle>{option.text}</Card.Subtitle>\n              <ProgressBar now={per} label={`${per}%`} />\n              <Card.Text>{option.votes.length} of {totalVotes} votes</Card.Text>\n            </div>\n          ))\n        }\n      </Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = ({ authedUser }, { question }) => {\n  console.log('log::');\n  console.log(question);\n  const options = [question.optionOne, question.optionTwo];\n\n  return {\n    authedUser,\n    options,\n    selected: options.map((option) => (\n      option.votes.find(userVote => {\n        return userVote === authedUser.id\n      })\n    )),\n    totalVotes: question.optionOne.votes.length + question.optionTwo.votes.length\n  }\n}\n\nexport default connect(mapStateToProps)(Answered);"]},"metadata":{},"sourceType":"module"}