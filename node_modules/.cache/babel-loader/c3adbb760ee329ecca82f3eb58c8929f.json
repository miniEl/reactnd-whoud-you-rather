{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/merhanelkheshen/Documents/MyStudy/react/react-nanodegree/would-you-rather(git)/reactnd-whout-you-rather/src/components/ViewQuestion/ViewQuestion.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Card, Container, Form } from 'react-bootstrap';\nimport Unanswered from './Unanswered';\nimport Answered from './Answered';\n\nclass ViewQuestion extends Component {\n  render() {\n    const {\n      authedUser,\n      users,\n      question\n    } = this.props;\n    console.log('View::'); // console.log(users);\n    // console.log(questions);\n\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"view-que-container\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        expand: \"sm\",\n        className: \"que-card\",\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          children: /*#__PURE__*/_jsxDEV(Card.Title, {\n            className: \"primary-text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n          className: \"que-card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"avatar-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"avatar\",\n              src: \"../../assets/images/\" + users[question.author].avatarURL,\n              alt: \"avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"divider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: \"Would you rather ...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 15\n            }, this), !this.props.answered ? /*#__PURE__*/_jsxDEV(Unanswered, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Answered, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = ({\n  authedUser,\n  users,\n  questions\n}, props) => {\n  console.log('View Que::');\n  const id = props.match.params.id;\n  return {\n    authedUser,\n    users,\n    // questions,\n    answered: authedUser.answers[id]\n  };\n};\n\nexport default connect(mapStateToProps)(ViewQuestion);","map":{"version":3,"sources":["/Users/merhanelkheshen/Documents/MyStudy/react/react-nanodegree/would-you-rather(git)/reactnd-whout-you-rather/src/components/ViewQuestion/ViewQuestion.js"],"names":["React","Component","connect","Button","Card","Container","Form","Unanswered","Answered","ViewQuestion","render","authedUser","users","question","props","console","log","author","avatarURL","answered","mapStateToProps","questions","id","match","params","answers"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,IAAlC,QAA8C,iBAA9C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,YAAN,SAA2BR,SAA3B,CAAqC;AACnCS,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,KAAd;AAAqBC,MAAAA;AAArB,QAAkC,KAAKC,KAA7C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAFO,CAGP;AACA;;AACA,wBACE,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,oBAArB;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,MAAM,EAAC,IAAb;AAAkB,QAAA,SAAS,EAAC,UAA5B;AAAA,gCACE,QAAC,IAAD,CAAM,MAAN;AAAA,iCACE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,SAAS,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,SAAS,EAAC,eAArB;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,gBAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,QAAf;AAAwB,cAAA,GAAG,EAAE,yBAAyBJ,KAAK,CAACC,QAAQ,CAACI,MAAV,CAAL,CAAuBC,SAA7E;AAAwF,cAAA,GAAG,EAAC;AAA5F;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AAAK,YAAA,SAAS,EAAC,iBAAf;AAAA,oCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAGI,CAAC,KAAKJ,KAAL,CAAWK,QAAZ,gBAEE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,oBAFF,gBAIE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,oBAPN;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AA0BD;;AAhCkC;;AAmCrC,MAAMC,eAAe,GAAG,CAAC;AAAET,EAAAA,UAAF;AAAcC,EAAAA,KAAd;AAAqBS,EAAAA;AAArB,CAAD,EAAmCP,KAAnC,KAA6C;AACnEC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAMM,EAAE,GAAGR,KAAK,CAACS,KAAN,CAAYC,MAAZ,CAAmBF,EAA9B;AAEA,SAAO;AACLX,IAAAA,UADK;AAELC,IAAAA,KAFK;AAGL;AACAO,IAAAA,QAAQ,EAAER,UAAU,CAACc,OAAX,CAAmBH,EAAnB;AAJL,GAAP;AAMD,CAVD;;AAYA,eAAepB,OAAO,CAACkB,eAAD,CAAP,CAAyBX,YAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Card, Container, Form } from 'react-bootstrap';\nimport Unanswered from './Unanswered';\nimport Answered from './Answered';\n\nclass ViewQuestion extends Component {\n  render() {\n    const { authedUser, users, question } = this.props;\n    console.log('View::');\n    // console.log(users);\n    // console.log(questions);\n    return (\n      <Container className=\"view-que-container\">\n        <Card expand=\"sm\" className=\"que-card\">\n          <Card.Header>\n            <Card.Title className=\"primary-text\"></Card.Title>\n          </Card.Header>\n          <Card.Body className=\"que-card-body\">\n            <div className=\"avatar-wrapper\">\n              <img className=\"avatar\" src={\"../../assets/images/\" + users[question.author].avatarURL} alt=\"avatar\" />\n            </div>\n            <div className=\"divider\"></div>\n            <div className=\"content-wrapper\">\n              <Card.Title>Would you rather ...</Card.Title>\n              {\n                !this.props.answered ?\n\n                  <Unanswered /> :\n\n                  <Answered />\n              }\n            </div>\n\n          </Card.Body>\n        </Card>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = ({ authedUser, users, questions }, props) => {\n  console.log('View Que::');\n  const id = props.match.params.id;\n\n  return {\n    authedUser,\n    users,\n    // questions,\n    answered: authedUser.answers[id]\n  }\n}\n\nexport default connect(mapStateToProps)(ViewQuestion);"]},"metadata":{},"sourceType":"module"}